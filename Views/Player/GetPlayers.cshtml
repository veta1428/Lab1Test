@model PlayersViewModel

<style>

    td {
        min-width: 100px;
    }

    div.block {
        margin-bottom: 20px;
    }

    div.block-small {
        margin-bottom: 10px;
    }

    body {
        font-family: Arial, Helvetica, sans-serif;
    }

    .element {
        margin-top: 30px;
    }

    /* The popup form - hidden by default */
    .form-popup {
        display: none;
        position: fixed;
        bottom: 0;
        right: 15px;
        border: 3px solid #f1f1f1;
        z-index: 9;
    }

    /* Add styles to the form container */
    .form-container {
        max-width: 500px;
        padding: 5px;
        background-color: white;
    }

        /* Full-width input fields */
        .form-container input[type=text], .form-container input[type=password] {
            width: 100%;
        }

            /* When the inputs get focus, do something */
            .form-container input[type=text]:focus, .form-container input[type=password]:focus {
                background-color: #ddd;
                outline: none;
            }

        /* Set a style for the submit/login button */

        /* Add a red background color to the cancel button */
        .form-container .cancel {
            background-color: red;
        }

        /* Add some hover effects to buttons */
        .form-container .btn:hover, .open-button:hover {
            opacity: 1;
        }
</style>

@{
    List<SelectListItem> listItems = new List<SelectListItem>();
    listItems.Add(new SelectListItem
            {
                Text = "RW",
                Value = "RW",
                Selected = @Model.Position == Lab1Test.EF.Position.RW,
            });
    listItems.Add(new SelectListItem
            {
                Text = "LW",
                Value = "LW",
                Selected = @Model.Position == Lab1Test.EF.Position.LW,
            });
    listItems.Add(new SelectListItem
            {
                Text = "C",
                Value = "C",
                Selected = @Model.Position == Lab1Test.EF.Position.C,
            });
    listItems.Add(new SelectListItem
            {
                Text = "D",
                Value = "D",
                Selected = @Model.Position == Lab1Test.EF.Position.D,
            });
    listItems.Add(new SelectListItem
            {
                Text = "G",
                Value = "G",
                Selected = @Model.Position == Lab1Test.EF.Position.G,
            });
}
<div width="50%">
    <form id="formFilter" method="get" asp-controller="Player" asp-action="GetFilteredPlayers">
        <div class="block">
            <label><b>Position</b></label>
            <div>
                @Html.DropDownListFor(model => model.Position, listItems, " ", new { @class="form-control"})
            </div>
        </div>


        <div class="block">
            <div>
                <label for="From"><b>From</b></label>
            </div>

            <input type="number" name="From" value="@Model.From" class="form-control" size="20" placeholder="From">
        </div>

        <div class="block">
            <div>
                <label for="To"><b>To</b></label>
            </div>

            <input type="number" name="To" value="@Model.To" class="form-control" placeholder="To">
        </div>
        <div class="block">
            <input type="submit" value="Search" class="btn btn-primary" />
        </div>

    </form>
</div>


<div style="overflow-x:auto;">

    @if (Model.Players.Count() == 0)
    {
        <p>No information matched your request found(</p>
    }
    else
    {
        <table>
            <tr>
                <td>PlayerId</td>
                <td>Jersey</td>
                <td>FName</td>
                <td>SName</td>
                <td>Position</td>
                <td>Birthday</td>
                <td>Weight</td>
                <td>Height</td>
                <td>Birthcity</td>
                <td>Birthstate</td>
            </tr>


            @foreach (var player in Model.Players)
            {
                <tr>
                    <td name="@player.Playerid">@player.Playerid</td>
                    <td name="@player.Playerid">@player.Jersey</td>
                    <td name="@player.Playerid">@player.Fname</td>
                    <td name="@player.Playerid">@player.Sname</td>
                    <td name="@player.Playerid">@player.Position</td>
                    <td name="@player.Playerid">@String.Format("{0:MM/dd/yyyy}", player.Birthday)</td>
                    <td name="@player.Playerid">@player.Weight</td>
                    <td name="@player.Playerid">@player.Height</td>
                    <td name="@player.Playerid">@player.Birthcity</td>
                    <td name="@player.Playerid">@player.Birthstate</td>
                    <td>
                        <button id="@player.Playerid" name="editButton" class="btn btn-outline-primary">Edit</button>
                    </td>

                </tr>
            }
        </table>
    }
</div>

<div class="form-popup" id="myForm">
    <form class="form-container" id="formEdit" method="post" asp-controller="Player" asp-action="EditPlayer">
        <h1>Edit</h1>

        <div>
            <input id="FromInput" type="number" name="From" value="@Model.From" required hidden>
        </div>

        <div>
            <input id="ToInput" type="number" name="To" value="@Model.To" required hidden>
        </div>

        @Html.DropDownListFor(model => model.Position, listItems, " ", new {@hidden=true})

        <input id="PlayerIdInput" type="text" name="PlayerId" required hidden class="form-control">


        <div class="block-small">
            <label for="Jersey"><b>Jersey</b></label>
            <input id="JerseyInput" type="text" name="Jersey" disabled class="form-control">
        </div>

        <div class="block-small">
            <label for="Fname"><b>Fname</b></label>
            <input id="FnameInput" type="text" name="Fname" disabled class="form-control">
        </div>

        <div class="block-small">
            <label for="Sname"><b>Sname</b></label>
            <input id="SnameInput" type="text" name="Sname" disabled class="form-control">
        </div>

        <div class="block-small">
            <label for="Position"><b>Position</b></label>
            <input id="PositionInput" type="text" name="Position" disabled class="form-control">
        </div>

        <div class="block-small">
            <label for="Birthday"><b>Birthday</b></label>
            <input id="BirthdayInput" type="date" name="Birthday" required class="form-control">
        </div>

        <div class="block-small">
            <label for="Weight"><b>Weight</b></label>
            <input id="WeightInput" type="text" name="Weight" disabled class="form-control">
        </div>

        <div class="block-small">
            <label for="Height"><b>Height</b></label>
            <input id="HeightInput" type="text" name="Height" disabled class="form-control">
        </div>

        <div class="block-small">
            <label for="Birthcity"><b>Birthcity</b></label>
            <input id="BirthcityInput" type="text" name="Birthcity" required class="form-control">
        </div>

        <div class="block-small">
            <label for="Birthstate"><b>Birthstate</b></label>
            <input id="BirthstateInput" type="text" name="Birthstate" required maxlength="2" class="form-control">
        </div>


    </form>
    <button id="submitButton" class="btn btn-primary">Save</button>
    <button onclick="cancelEdit()" class="btn btn-primary">Cancel</button>
</div>


<script>

    var editButtons = document.querySelectorAll('button[name="editButton"]');

    Array.prototype.forEach.call(editButtons, function(radio) {
        radio.addEventListener('click', editHandler);
    });

    function editHandler(event) {
        console.log(this)
        presetFormData(this.id)
    }

    function presetFormData(playerId) {
        var inputsName = ['PlayerIdInput', 'JerseyInput', 'FnameInput', "SnameInput", "PositionInput", "BirthdayInput",
            "WeightInput", "HeightInput", "BirthcityInput", "BirthstateInput"]

        var info = document.querySelectorAll('td[name="' + playerId + '"]');

        for (var i = 0; i < inputsName.length; i++) {
            var input = document.getElementById(inputsName[i]);
            input.value = info[i].innerHTML;
        }

        var form = document.getElementById('myForm');
        form.style.display = 'block'
    }

    function cancelEdit() {
        var form = document.getElementById('myForm');
        form.style.display = 'none'
    }

    const btnSubmit = document.getElementById('submitButton');

    btnSubmit.addEventListener("click", function() {
        console.log('clicked');
        var inputDate = document.getElementById('BirthdayInput').value.substring(0, 4);
        var from = parseInt(document.getElementById('FromInput').value);
        var to = parseInt(document.getElementById('ToInput').value);

        console.log(inputDate);
        console.log(from);
        console.log(to);

        if (inputDate > to || inputDate < from) {
            alert('Invalid year of birth value!');
        }
        else {
            document.getElementById('formEdit').submit();
        }
    });

</script>